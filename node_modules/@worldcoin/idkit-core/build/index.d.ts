import { I as ISuccessResult, A as AppErrorCodes, V as VerificationState } from './result-CqgtArQe.js';
export { a as IErrorState } from './result-CqgtArQe.js';
import { I as IDKitConfig, V as VerificationLevel } from './config-fuwC_Hia.js';
export { A as AbiEncodedValue, C as CredentialType } from './config-fuwC_Hia.js';
import * as zustand from 'zustand';

type WorldBridgeStore = {
    bridge_url: string;
    iv: Uint8Array | null;
    key: CryptoKey | null;
    requestId: string | null;
    connectorURI: string | null;
    result: ISuccessResult | null;
    errorCode: AppErrorCodes | null;
    verificationState: VerificationState;
    createClient: (config: IDKitConfig) => Promise<void>;
    pollForUpdates: () => Promise<void>;
    reset: () => void;
};
declare const useWorldBridgeStore: zustand.UseBoundStore<zustand.StoreApi<WorldBridgeStore>>;

declare const DEFAULT_VERIFICATION_LEVEL = VerificationLevel.Orb;
/**
 * @dev use to convert verification level to accepted credential types for proof request
 * @param verification_level
 * @returns
 */
declare const verification_level_to_credential_types: (verification_level: VerificationLevel) => string[];

export { AppErrorCodes, DEFAULT_VERIFICATION_LEVEL, IDKitConfig, ISuccessResult, VerificationLevel, VerificationState, type WorldBridgeStore, useWorldBridgeStore, verification_level_to_credential_types };
